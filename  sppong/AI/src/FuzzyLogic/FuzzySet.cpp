// ***************************************************************
//  FuzzySet   version:  1.0   Ankur Sheel  date: 04/05/2009
//  -------------------------------------------------------------
//  
//  -------------------------------------------------------------
//  Copyright (C) 2009 - All Rights Reserved
// ***************************************************************
// 
// ***************************************************************
#include "stdafx.h"
#include "FuzzySet.h"
#include "AIDefines.h"
#include <assert.h>

//----------------------------------------------------------------------------
// Construction and Destruction
//----------------------------------------------------------------------------
cFuzzySet::cFuzzySet()
: m_fDOM(0)
, m_fRepresentativeValue(0)
{
}
//----------------------------------------------------------------------------

cFuzzySet::cFuzzySet(const float fRepVal)
: m_fDOM(0)
, m_fRepresentativeValue(fRepVal)
{
}
//----------------------------------------------------------------------------

cFuzzySet::~cFuzzySet()
{
}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// if this fuzzy set is part of a consequent FLV, and it is fired by a rule then
// this method sets the DOM to the maximum of the parameter value or the set's 
// existing m_fDOM value
//----------------------------------------------------------------------------
void cFuzzySet::ORwithDOM(const float val)
{
	if(val >m_fDOM)
	{
		m_fDOM = val;
	}

}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Returns m_fRepresentativeValue
//----------------------------------------------------------------------------
float cFuzzySet::GetRepresentativeValue()
{
	return m_fRepresentativeValue;
}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Set m_fDOM to 0
//----------------------------------------------------------------------------
void cFuzzySet::ClearDOM()
{
	m_fDOM = 0.0;
}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Sets m_fRepresentativeValue to val
//----------------------------------------------------------------------------
void cFuzzySet::CreateFuzzySet(const float val)
{
	m_fDOM = 0.0f;
	m_fRepresentativeValue = val;
}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// Sets m_fDOM to val
//----------------------------------------------------------------------------
void cFuzzySet::SetDOM(const float val)
{
#ifdef _DEBUG
	assert((val <=1) && (val >=0) && " cFuzzySet::SetDOM invalid value");
#endif // _DEBUG
	m_fDOM= val;
}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// retruns the dom
//----------------------------------------------------------------------------
float cFuzzySet::GetDOM()
{
	return m_fDOM;
}
//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
// returns the address of this fuzzy set
//----------------------------------------------------------------------------

cFuzzySet* cFuzzySet::GetAddress()
{
	return this;
}
//----------------------------------------------------------------------------